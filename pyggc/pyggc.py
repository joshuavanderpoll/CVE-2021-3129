import hashlib
import zlib
from datetime import datetime


class PYGGC:
    def __init__(self, payload: bytes, filename: str) -> None:
        self.filename = filename
        self.dummy_data = b'test'
        self.payload = payload

    def generate_phar(self) -> bytes:
        STUB = b'<?php __HALT_COMPILER(); ?>\r\n'
        FILES_IN_PHAR = self.int_bytes(1)
        API_VERSION = b'\x11\x00'
        PHAR_BITMAP_FLAGS = b'\x00\x00\x01\x00'

        ALIAS_LENGTH = self.int_bytes(0)
        ALIAS = b''

        METADATA_LENGTH = self.int_bytes(len(self.payload))
        METADATA = self.payload
        FILENAME_LENGTH = self.int_bytes(len(self.filename))
        FILENAME = self.filename.encode('utf-8')

        FILE_SIZE = self.int_bytes(len(self.dummy_data))
        TIMESTAMP = int(datetime.now().timestamp()).to_bytes(4, byteorder='little')

        COMPRESSED_SIZE = self.int_bytes(len(self.dummy_data))
        CRC32_CHECKSUM = zlib.crc32(self.dummy_data).to_bytes(4, byteorder='little')

        FILE_BITMAP_FLAGS = b'\xA4\x01\x00\x00'
        SERIALIZED_METADATA_LENGTH = self.int_bytes(0)
        SERIALIZED_METADATA = self.dummy_data

        # MANIFEST_LENGTH = self.int_bytes(863)
        MANIFEST = FILES_IN_PHAR + API_VERSION + PHAR_BITMAP_FLAGS + ALIAS_LENGTH + ALIAS + METADATA_LENGTH + METADATA + FILENAME_LENGTH + FILENAME + FILE_SIZE + TIMESTAMP + COMPRESSED_SIZE + CRC32_CHECKSUM + FILE_BITMAP_FLAGS + SERIALIZED_METADATA_LENGTH + SERIALIZED_METADATA
        MANIFEST_LENGTH = self.int_bytes(len(MANIFEST))

        # SHA-1 Signature
        SIGNATURE_HASH = hashlib.sha1(STUB + MANIFEST_LENGTH + MANIFEST).digest()
        SIGNATURE_ID = b'\x02\x00\x00\x00GBMB'

        return STUB + MANIFEST_LENGTH + MANIFEST + SIGNATURE_HASH + SIGNATURE_ID


    def int_bytes(self, value: int, bytes: int = 4) -> bytes:
        return value.to_bytes(bytes, byteorder='little')