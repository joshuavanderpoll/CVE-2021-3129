import hashlib
import os
import time


class PYGGC:
    def __init__(self, payload: bytes, filename: str) -> None:
        self.filename = filename
        self.payload = payload

    def generate_phar(self) -> bytes:
        file_basename = os.path.splitext(self.filename)[0].encode('utf-8')
        file_name = self.filename.encode('utf-8')
        filename_size = self.length_bytes(self.filename)
        file_size = self.int_bytes(4)
        file_timestamp = round(time.time()).to_bytes(4, byteorder='little')
        file_checksum = b'\x0C\x7E\x7F\xD8'
        files_flag = b'\xA4\x01\x00\x00'
        file_metadata = b''
        file_metadata_size = self.length_bytes(file_metadata)

        file_count = self.int_bytes(1)
        api_version = b'\x11\x00'
        global_flag = b'\x00\x00\x01\x00'
        alias = b''
        alias_size = self.length_bytes(alias)

        HEADER_INFO = file_count + api_version + global_flag + alias_size + alias
        PAYLOAD_SIZE = self.int_bytes(len(self.payload))
        FILE_REGISTER = filename_size + file_name + file_size + file_timestamp + file_size + file_checksum + files_flag + file_metadata_size + file_metadata + file_basename

        manifest_length = self.int_bytes(len(HEADER_INFO + PAYLOAD_SIZE + self.payload + FILE_REGISTER))
        HEADER = b'<?php __HALT_COMPILER(); ?>\r\n' + manifest_length
        UNSIGNED_PHAR = HEADER + HEADER_INFO + PAYLOAD_SIZE + self.payload + FILE_REGISTER

        # SHA-1 Signature
        SIGNATURE_HASH = hashlib.sha1(UNSIGNED_PHAR).digest()
        SIGNATURE_ID = b'\x02\x00\x00\x00GBMB'
        SIGNED_PHAR = UNSIGNED_PHAR + SIGNATURE_HASH + SIGNATURE_ID

        return SIGNED_PHAR


    def length_bytes(self, value) -> bytes:
        return len(value).to_bytes(4, byteorder='little')


    def int_bytes(self, value: int) -> bytes:
        return value.to_bytes(4, byteorder='little')