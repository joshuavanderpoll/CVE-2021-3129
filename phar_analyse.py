import sys
import hashlib
from struct import unpack

def read_int(data, offset, size=4):
    return int.from_bytes(data[offset:offset+size], byteorder='little'), offset + size

def read_bytes(data, offset, size):
    return data[offset:offset+size], offset + size

def validate_phar_signature(phar_data):
    STUB_END = b'<?php __HALT_COMPILER(); ?>\r\n'

    print(f"PHAR Size: {len(phar_data)}")

    # First, check for the stub
    if not phar_data.startswith(STUB_END):
        print("Invalid PHAR stub.")
        return
    
    offset = len(STUB_END)
    
    # Read manifest length
    manifest_length, offset = read_int(phar_data, offset)
    
    # Read the manifest
    manifest, offset = read_bytes(phar_data, offset, manifest_length)
    
    # Display manifest info
    print(f"Manifest Length: {manifest_length}")

    manifest_offset = 0
    
    # Parse the manifest to extract data
    num_files, manifest_offset = read_int(manifest, manifest_offset, 4)
    api_version, manifest_offset = read_bytes(manifest, manifest_offset, 2)
    bitmap_flags, manifest_offset = read_bytes(manifest, manifest_offset, 4)
    
    print(f"Number of Files in PHAR: {num_files}")
    print(f"API Version: {api_version.hex()}")
    print(f"Bitmap Flags: {bitmap_flags.hex()}")

    alias_length, manifest_offset = read_int(manifest, manifest_offset)
    if alias_length > 0:
        alias, manifest_offset = read_bytes(manifest, manifest_offset, alias_length)
        print(f"Alias: {alias.decode()}")
    else:
        print("No Alias")
    
    metadata_length, manifest_offset = read_int(manifest, manifest_offset)
    print(f"Metadata Length: {metadata_length}")
    if metadata_length > 0:
        metadata, manifest_offset = read_bytes(manifest, manifest_offset, metadata_length)
    else:
        print("No Metadata")
    
    # Read the file information within the manifest
    filename_length, manifest_offset = read_int(manifest, manifest_offset)
    filename, manifest_offset = read_bytes(manifest, manifest_offset, filename_length)
    
    print(f"Filename: {filename.decode()}")
    
    file_size, manifest_offset = read_int(manifest, manifest_offset)
    timestamp, manifest_offset = read_bytes(manifest, manifest_offset, 4)
    compressed_size, manifest_offset = read_int(manifest, manifest_offset)
    crc32_checksum, manifest_offset = read_bytes(manifest, manifest_offset, 4)
    
    print(f"File Size: {file_size}")
    print(f"Timestamp: {unpack('<I', timestamp)[0]}")  # Unpack timestamp
    print(f"Compressed Size: {compressed_size}")
    print(f"CRC32 Checksum: {crc32_checksum.hex()}")

    file_bitmap_flags, manifest_offset = read_bytes(manifest, manifest_offset, 4)
    serialized_metadata_length, manifest_offset = read_int(manifest, manifest_offset)
    serialized_metadata, manifest_offset = read_bytes(manifest, manifest_offset, serialized_metadata_length)
    
    print(f"File Bitmap Flags: {file_bitmap_flags.hex()}")
    print(f"Serialized Metadata: {serialized_metadata.hex()}")
    
    # Find the signature at the end of the PHAR data
    # Look for the marker 'GBMB' (47424D42 in hex) and 02000000 before it
    signature_marker = b'\x02\x00\x00\x00\x47\x42\x4D\x42'
    
    # Reverse search for the marker from the end of the file
    signature_marker_index = phar_data.rfind(signature_marker)
    if signature_marker_index == -1:
        print("Signature marker not found.")
        return
    
    # The signature is 20 bytes before the marker
    signature_offset = signature_marker_index - 20
    signature, _ = read_bytes(phar_data, signature_offset, 20)
    
    print(f"Signature Hash (Hex): {signature.hex()}")

    # Extract the data before the signature to recalculate the hash
    data_before_signature = phar_data[:signature_offset]

    # Recalculate the signature using SHA-1
    calculated_signature = hashlib.sha1(data_before_signature).digest()
    
    if signature == calculated_signature:
        print("PHAR file signature is valid.")
    else:
        print("Invalid PHAR file signature!")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python validate_phar.py <phar_file>")
        sys.exit(1)
    
    phar_filename = sys.argv[1]
    print(f"Filename: {phar_filename}")
    
    try:
        with open(phar_filename, 'rb') as f:
            phar_data = f.read()
        
        validate_phar_signature(phar_data)
    
    except FileNotFoundError:
        print(f"File '{phar_filename}' not found.")
        sys.exit(1)
